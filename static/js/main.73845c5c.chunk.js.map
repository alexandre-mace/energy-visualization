{"version":3,"sources":["config/excludedEntries.js","purifiers/purifyDataset.js","components/Filters.js","components/ComplementaryInformation.js","utils/filterCountriesDataset.js","components/LinkTab.js","utils/allyProps.js","components/TabPanel.js","utils/generateChartJsData.js","components/WorldVisualization.js","components/SingleCountryVisualization.js","App.js","utils/getRandomColor.js","utils/generateChartJsSingleCountryData.js","utils/generateChartJsMergedData.js","serviceWorker.js","index.js"],"names":["excludedEntries","purifyDataset","dataset","filter","data","includes","country","map","Object","keys","years","forEach","year","parseInt","Filters","appMode","singleCountry","handleSingleCountryChange","countries","currentYear","handleYearChange","filterTop10Producers","filterTop10Consumers","handleFilterTop10ProducersChange","handleFilterTop10ConsumersChange","React","useState","anchorEl","setAnchorEl","handleClose","open","Boolean","id","undefined","Button","size","aria-describedby","className","variant","color","onClick","event","currentTarget","fontSize","Popover","onClose","anchorReference","anchorOrigin","vertical","horizontal","transformOrigin","FormControl","InputLabel","Select","labelId","value","onChange","index","MenuItem","key","FormControlLabel","control","Switch","checked","label","ComplementaryInformation","href","filterCountriesDataset","producersDataset","consumersDataset","countriesToFilter","sort","a","b","slice","LinkTab","props","Tab","component","preventDefault","a11yProps","TabPanel","children","other","Typography","role","hidden","aria-labelledby","Box","p","generateChartJsData","colors","labels","datasets","backgroundColor","hoverBackgroundColor","WorldVisualization","productionData","consumptionData","mergedData","width","height","options","scales","xAxes","barPercentage","categoryPercentage","SingleCountryVisualization","singleCountryData","purifiedProductionData","production","purifiedConsumptionData","consumption","Math","random","toString","App","producerDataset","consumerDataset","setFilterTop10Producers","setFilterTop10Consumers","setSingleCountry","setCurrentYear","setAppMode","filteredData","producers","consumers","borderWidth","generateChartJsMergedData","find","producer","lineTension","borderColor","borderCapStyle","fill","borderJoinStyle","borderDash","borderDashOffset","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","Tabs","centered","newValue","aria-label","indicatorColor","textColor","target","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yRAAA,IAgBeA,EAhBS,CACpB,QACA,OACA,KACA,QACA,SACA,iBACA,MACA,gBACA,cACA,UACA,OACA,UACA,UCXW,SAASC,EAAcC,GAClC,OAAOA,EACFC,QAAO,SAAAC,GAAI,OAAKJ,EAAgBK,SAASD,EAAKE,YAC9CC,KAAI,SAAAH,GAID,OAHAI,OAAOC,KAAKL,EAAKM,OAAOC,SAAQ,SAASC,GACrCR,EAAKM,MAAME,GAAQC,SAAST,EAAKM,MAAME,OAEpC,CACHN,QAASF,EAAKE,QACdI,MAAON,EAAKM,U,6FCsGbI,EAvGC,SAAC,GAYV,IAXcC,EAWf,EAXeA,QACAC,EAUf,EAVeA,cACAC,EASf,EATeA,0BACAC,EAQf,EAReA,UACAR,EAOf,EAPeA,MACAS,EAMf,EANeA,YACAC,EAKf,EALeA,iBACAC,EAIf,EAJeA,qBACAC,EAGf,EAHeA,qBACAC,EAEf,EAFeA,iCACAC,EACf,EADeA,iCACf,EAC8BC,IAAMC,SAAS,MAD7C,mBACKC,EADL,KACeC,EADf,KAUIC,EAAc,WAChBD,EAAY,OAGVE,EAAOC,QAAQJ,GACfK,EAAKF,EAAO,sBAAmBG,EAErC,OACI,oCACI,kBAACC,EAAA,EAAD,CAAQC,KAAM,QAASC,mBAAkBJ,EAAIK,UAAW,kBAAmBC,QAAQ,YAAYC,MAAM,UAAUC,QAhBnG,SAAAC,GAChB,GAAiB,OAAbd,EACA,OAAOE,IAEXD,EAAYa,EAAMC,iBAaV,kBAAC,IAAD,CAAUC,SAAU,WAExB,yBAAKN,UAAU,sBACX,kBAACO,EAAA,EAAD,CACIZ,GAAIA,EACJF,KAAMA,EACNH,SAAUA,EACVkB,QAAShB,EACTQ,UAAW,OACXS,gBAAgB,WAChBC,aAAc,CACVC,SAAU,SACVC,WAAY,UAEhBC,gBAAiB,CACbF,SAAU,MACVC,WAAY,WAGhB,yBAAKZ,UAAW,OACC,IAAZtB,GACD,oCACI,kBAACoC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYpB,GAAG,4BAAf,QACA,kBAACqB,EAAA,EAAD,CACIC,QAAQ,2BACRtB,GAAG,qBACHuB,MAAOpC,EACPqC,SAAUpC,GAETV,EAAMH,KAAI,SAACK,EAAM6C,GAAP,OACP,kBAACC,EAAA,EAAD,CAAUC,IAAKF,EAAOF,MAAO3C,GAAOA,QAGlC,6BACd,kBAACgD,EAAA,EAAD,CACIC,QACI,kBAACC,EAAA,EAAD,CAAQC,QAAS1C,EAAsBmC,SAAUjC,EAAkCgC,MAAM,SAAShB,MAAM,YAE5GyB,MAAM,4BACR,6BACF,kBAACJ,EAAA,EAAD,CACIC,QACI,kBAACC,EAAA,EAAD,CAAQC,QAASzC,EAAsBkC,SAAUhC,EAAkC+B,MAAM,SAAShB,MAAM,YAE5GyB,MAAM,4BACR,8BAGO,IAAZjD,GACD,kBAACoC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYpB,GAAG,4BAAf,kBACA,kBAACqB,EAAA,EAAD,CACIC,QAAQ,2BACRtB,GAAG,qBACHuB,MAAOvC,EACPwC,SAAUvC,GAETC,EAAUX,KAAI,SAACK,EAAM6C,GAAP,OACX,kBAACC,EAAA,EAAD,CAAUC,IAAKF,EAAOF,MAAO3C,GAAOA,a,iBC7CzDqD,EAnDkB,WAAO,IAAD,EACHxC,IAAMC,SAAS,MADZ,mBAC5BC,EAD4B,KAClBC,EADkB,KAU7BC,EAAc,WAChBD,EAAY,OAGVE,EAAOC,QAAQJ,GACfK,EAAKF,EAAO,sBAAmBG,EAErC,OACI,oCACI,kBAACC,EAAA,EAAD,CAAQC,KAAM,QAASC,mBAAkBJ,EAAIK,UAAW,cAAeC,QAAQ,YAAYC,MAAM,UAAUC,QAhB/F,SAAAC,GAChB,GAAiB,OAAbd,EACA,OAAOE,IAEXD,EAAYa,EAAMC,iBAaV,kBAAC,IAAD,CAAUC,SAAU,WAExB,yBAAKN,UAAU,kBACX,kBAACO,EAAA,EAAD,CACIZ,GAAIA,EACJF,KAAMA,EACNH,SAAUA,EACVkB,QAAShB,EACTQ,UAAW,OACXS,gBAAgB,WAChBC,aAAc,CACVC,SAAU,SACVC,WAAY,UAEhBC,gBAAiB,CACbF,SAAU,MACVC,WAAY,WAGhB,yBAAKZ,UAAW,OAAhB,uEACwE,6BAAK,6BAD7E,aAEc,6BACV,uBAAG6B,KAAK,2EAAR,cAHJ,IAGqG,6BACjG,uBAAGA,KAAK,gFAAR,oBCfTC,EAjCgB,SAACC,EAAkBC,EAAkBlD,EAAaE,EAAsBC,GAEnG,IAAIgD,GAAoB,EAyBxB,OAvBIjD,IACAiD,EAAoBF,EAAiBG,MAAK,SAASC,EAAGC,GAClD,OAAGD,EAAE9D,MAAMS,GAAesD,EAAE/D,MAAMS,GAAuB,EACtDqD,EAAE9D,MAAMS,GAAesD,EAAE/D,MAAMS,IAAwB,EACnD,KACRuD,MAAM,EAAG,IAAInE,KAAI,SAAAH,GAAI,OAAIA,EAAKE,YAEjCgB,IACAgD,EAAoBD,EAAiBE,MAAK,SAASC,EAAGC,GAClD,OAAGD,EAAE9D,MAAMS,GAAesD,EAAE/D,MAAMS,GAAuB,EACtDqD,EAAE9D,MAAMS,GAAesD,EAAE/D,MAAMS,IAAwB,EACnD,KACRuD,MAAM,EAAG,IAAInE,KAAI,SAAAH,GAAI,OAAIA,EAAKE,YAW9B,CACH,UAT2BgE,EACzBF,EAAiBjE,QAAO,SAAAC,GAAI,OAAIkE,EAAkBjE,SAASD,EAAKE,YAChE8D,EAQF,UAN2BE,EACzBD,EAAiBlE,QAAO,SAAAC,GAAI,OAAIkE,EAAkBjE,SAASD,EAAKE,YAChE+D,I,kBCtBK,SAASM,EAAQC,GAC5B,OACI,kBAACC,EAAA,EAAD,eACIC,UAAU,IACVtC,QAAS,SAAAC,GACLA,EAAMsC,mBAENH,ICVD,SAASI,EAAUvB,GAC9B,MAAO,CACHzB,GAAG,WAAD,OAAayB,GACf,gBAAgB,gBAAhB,OAAiCA,I,6BCC1B,SAASwB,EAASL,GAAQ,IAC7BM,EAAqCN,EAArCM,SAAU3B,EAA2BqB,EAA3BrB,MAAOE,EAAoBmB,EAApBnB,MAAU0B,EADC,YACSP,EADT,8BAGpC,OACI,kBAACQ,EAAA,EAAD,eACIN,UAAU,MACVO,KAAK,WACLC,OAAQ/B,IAAUE,EAClBzB,GAAE,uBAAkByB,GACpB8B,kBAAA,kBAA4B9B,IACxB0B,GAEH5B,IAAUE,GAAS,kBAAC+B,EAAA,EAAD,CAAKC,EAAG,GAAIP,IChB7B,SAASQ,EAAoBxF,EAASiB,EAAawE,GAC9D,MAAO,CACHC,OAAQ1F,EAAQK,KAAI,SAAAH,GAAI,OAAIA,EAAKE,WAEjCuF,SAAU,CAAC,CACPzF,KAAMF,EAAQK,KAAI,SAAAH,GAAI,OAAIA,EAAKM,MAAMS,MACrC2E,gBAAiBH,EACjBI,qBAAsBJ,K,YCmBnBK,EAvBY,SAAC,GAAD,IAAGC,EAAH,EAAGA,eAAgBC,EAAnB,EAAmBA,gBAAiBC,EAApC,EAAoCA,WAApC,OACvB,oCACI,yBAAK9D,UAAW,eAAhB,yEACA,kBAAC,IAAD,CAAUjC,KAAM6F,IAChB,yBAAK5D,UAAW,eAAhB,0EACA,kBAAC,IAAD,CAAUjC,KAAM8F,IAChB,yBAAK7D,UAAW,eAAhB,mBACA,kBAAC,IAAD,CACIjC,KAAM+F,EACNC,MAAO,IACPC,OAAQ,GACRC,QAAS,CACLC,OAAQ,CACJC,MAAO,CAAC,CACJC,cAAe,EACfC,mBAAoB,UCR7BC,EAPoB,SAAC,GAAD,IAAG3F,EAAH,EAAGA,cAAe4F,EAAlB,EAAkBA,kBAAlB,OAC/B,oCACI,yBAAKvE,UAAW,eAAhB,yCAAsErB,GACtE,kBAAC,IAAD,CAAMZ,KAAMwG,M,gBCgBhBC,EAAyB5G,EAAc6G,GACvCC,EAA0B9G,EAAc+G,GAGtCtG,EAAQF,OAAOC,KAAKqG,EAAW,GAAGpG,OAClCiF,EAASoB,EAAwBxG,KAAI,iBC1BhC,MAAM,GAAG,IAAI0G,KAAKC,SAAS,GAAGC,SAAS,OD2B5CjG,EAAY2F,EAAuBtG,KAAI,SAAAH,GAAI,OAAIA,EAAKE,WAwF3C8G,MAtFf,WAAgB,IE9BkCC,EAAiBC,EF8BpD,EAC6C7F,IAAMC,UAAS,GAD5D,mBACJL,EADI,KACkBkG,EADlB,OAE6C9F,IAAMC,UAAS,GAF5D,mBAEJJ,EAFI,KAEkBkG,EAFlB,OAG+B/F,IAAMC,SAAS,UAH9C,mBAGJV,EAHI,KAGWyG,EAHX,OAI2BhG,IAAMC,SAAS,QAJ1C,mBAIJP,EAJI,KAISuG,EAJT,OAKmBjG,IAAMC,SAAS,GALlC,mBAKJX,EALI,KAKK4G,EALL,KAOLC,EAAezD,EAAuB0C,EAAwBE,EAAyB5F,EAAaE,EAAsBC,GAyB1H2E,EAAiBP,EAAoBkC,EAAaC,UAAW1G,EAAawE,GAC1EO,EAAkBR,EAAoBkC,EAAaE,UAAW3G,EAAawE,GAC3EQ,EGhEK,SAAmC7E,EAAsBuG,EAAWC,EAAW3G,GAC1F,MAAO,CACHyE,OAAStE,EACHwG,EAAUvH,KAAI,SAAAH,GAAI,OAAIA,EAAKE,WAC3BuH,EAAUtH,KAAI,SAAAH,GAAI,OAAIA,EAAKE,WAEjCuF,SAAU,CACN,CACI7B,MAAO,2BACP5D,KAAMyH,EAAUtH,KAAI,SAAAH,GAAI,OAAIA,EAAKM,MAAMS,MACvC2E,gBAAiB,wBACjBiC,YAAa,GAEjB,CACI/D,MAAO,4BACP5D,KAAM0H,EAAUvH,KAAI,SAAAH,GAAI,OAAIA,EAAKM,MAAMS,MACvC2E,gBAAiB,wBACjBiC,YAAa,KH+CNC,CAA0B1G,EAAsBsG,EAAaC,UAAWD,EAAaE,UAAW3G,GAC7GyF,GEjEwCS,EFkE1CR,EAAuBoB,MAAK,SAAAC,GAAQ,OAAIA,EAAS5H,UAAYU,KElEFsG,EFmE3DP,EAAwBkB,MAAK,SAAAC,GAAQ,OAAIA,EAAS5H,UAAYU,KElE3D,CACH4E,OAAQpF,OAAOC,KAAK4G,EAAgB3G,OACpCmF,SAAU,CACN,CACI7B,MAAO,2BACP5D,KAAMI,OAAOC,KAAK4G,EAAgB3G,OAAOH,KAAI,SAAAK,GAAI,OAAIyG,EAAgB3G,MAAME,MAC3EkF,gBAAiB,wBACjBqC,YAAa,GACbC,YAAa,wBACbC,eAAgB,OAChBN,YAAa,EACbO,MAAM,EACNC,gBAAiB,QACjBC,WAAY,GACZC,iBAAkB,EAClBC,iBAAkB,wBAClBC,qBAAsB,wBACtBC,iBAAkB,EAClBC,iBAAkB,EAClBC,0BAA2B,wBAC3BC,sBAAuB,wBACvBC,sBAAuB,EACvBC,YAAa,EACbC,eAAgB,IAEpB,CACIlF,MAAO,4BACP5D,KAAMI,OAAOC,KAAK6G,EAAgB5G,OAAOH,KAAI,SAAAK,GAAI,OAAI0G,EAAgB5G,MAAME,MAC3EkF,gBAAiB,wBACjBqC,YAAa,GACbC,YAAa,wBACbC,eAAgB,OAChBN,YAAa,EACbO,MAAM,EACNC,gBAAiB,QACjBC,WAAY,GACZC,iBAAkB,EAClBC,iBAAkB,wBAClBC,qBAAsB,wBACtBC,iBAAkB,EAClBC,iBAAkB,EAClBC,0BAA2B,wBAC3BC,sBAAuB,wBACvBC,sBAAuB,EACvBC,YAAa,EACbC,eAAgB,OFwB5B,OACI,yBAAK7G,UAAU,OAEX,kBAAC8G,EAAA,EAAD,CACIC,UAAQ,EACR7F,MAAOxC,EACPyC,SAnBgB,SAACf,EAAO4G,GAChC1B,EAAW0B,IAmBHC,aAAW,mBACXC,eAAe,UACfC,UAAU,WAEV,kBAAC7E,EAAD,eAASX,MAAM,SAAagB,EAAU,KACtC,kBAACL,EAAD,eAASX,MAAM,kBAAsBgB,EAAU,MAEnD,kBAACC,EAAD,CAAU1B,MAAOxC,EAAS0C,MAAO,GAC7B,kBAAC,EAAD,CACIwC,eAAgBA,EAChBC,gBAAiBA,EACjBC,WAAYA,KAGpB,kBAAClB,EAAD,CAAU1B,MAAOxC,EAAS0C,MAAO,GAC7B,kBAAC,EAAD,CACIzC,cAAeA,EACf4F,kBAAmBA,KAI3B,kBAAC,EAAD,MACA,kBAAC,EAAD,CACI7F,QAASA,EACTC,cAAeA,EACfC,0BAjDsB,SAACwB,GAC/BgF,EAAiBhF,EAAMgH,OAAOlG,QAiDtBrC,UAAWA,EACXR,MAAOA,EACPS,YAAaA,EACbC,iBAzDa,SAACqB,GACtBiF,EAAejF,EAAMgH,OAAOlG,QAyDpBlC,qBAAsBA,EACtBC,qBAAsBA,EACtBC,iCAtE6B,WACrCgG,GAAyBlG,GACzBmG,GAAwB,IAqEhBhG,iCAlE6B,WACrCgG,GAAyBlG,GACzBiG,GAAwB,QIlCZxF,QACW,cAA7B2H,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.73845c5c.chunk.js","sourcesContent":["const excludedEntries = [\n    'World',\n    'OECD',\n    'G7',\n    'BRICS',\n    'Europe',\n    'European Union',\n    'CIS',\n    'North America',\n    'Middle-East',\n    'America',\n    'Asia',\n    'Pacific',\n    'Africa'\n];\n\nexport default excludedEntries","import excludedEntries from \"../config/excludedEntries\";\n\nexport default function purifyDataset(dataset) {\n    return dataset\n        .filter(data => !excludedEntries.includes(data.country))\n        .map(data => {\n            Object.keys(data.years).forEach(function(year){\n                data.years[year] = parseInt(data.years[year])\n            });\n            return {\n                country: data.country,\n                years: data.years\n            }\n        })\n}","import Button from \"@material-ui/core/Button\";\nimport TuneIcon from \"@material-ui/icons/Tune\";\nimport Popover from \"@material-ui/core/Popover\";\nimport {FormControlLabel, Switch} from \"@material-ui/core\";\nimport React from \"react\";\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nconst Filters = ({\n                     appMode,\n                     singleCountry,\n                     handleSingleCountryChange,\n                     countries,\n                     years,\n                     currentYear,\n                     handleYearChange,\n                     filterTop10Producers,\n                     filterTop10Consumers,\n                     handleFilterTop10ProducersChange,\n                     handleFilterTop10ConsumersChange\n}) => {\n    const [anchorEl, setAnchorEl] = React.useState(null);\n\n    const handleClick = event => {\n        if (anchorEl !== null) {\n            return handleClose()\n        }\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const open = Boolean(anchorEl);\n    const id = open ? 'simple-popover' : undefined;\n\n    return (\n        <>\n            <Button size={\"large\"} aria-describedby={id} className={\"settings-button\"} variant=\"contained\" color=\"primary\" onClick={handleClick}>\n                <TuneIcon fontSize={\"large\"}/>\n            </Button>\n            <div className=\"settings-container\">\n                <Popover\n                    id={id}\n                    open={open}\n                    anchorEl={anchorEl}\n                    onClose={handleClose}\n                    className={\"mt-3\"}\n                    anchorReference=\"anchorEl\"\n                    anchorOrigin={{\n                        vertical: 'bottom',\n                        horizontal: 'center',\n                    }}\n                    transformOrigin={{\n                        vertical: 'top',\n                        horizontal: 'center',\n                    }}\n                >\n                    <div className={\"p-3\"}>\n                        {appMode === 0 &&\n                        <>\n                            <FormControl>\n                                <InputLabel id=\"demo-simple-select-label\">Year</InputLabel>\n                                <Select\n                                    labelId=\"demo-simple-select-label\"\n                                    id=\"demo-simple-select\"\n                                    value={currentYear}\n                                    onChange={handleYearChange}\n                                >\n                                    {years.map((year, index) => (\n                                        <MenuItem key={index} value={year}>{year}</MenuItem>\n                                    ))}\n                                </Select>\n                            </FormControl><br/>\n                            <FormControlLabel\n                                control={\n                                    <Switch checked={filterTop10Producers} onChange={handleFilterTop10ProducersChange} value=\"hidden\" color=\"primary\" />\n                                }\n                                label=\"Filter top 10 producers\"\n                            /><br/>\n                            <FormControlLabel\n                                control={\n                                    <Switch checked={filterTop10Consumers} onChange={handleFilterTop10ConsumersChange} value=\"hidden\" color=\"primary\" />\n                                }\n                                label=\"Filter top 10 consumers\"\n                            /><br/>\n                        </>\n                        }\n                        {appMode === 1 &&\n                        <FormControl>\n                            <InputLabel id=\"demo-simple-select-label\">Single country</InputLabel>\n                            <Select\n                                labelId=\"demo-simple-select-label\"\n                                id=\"demo-simple-select\"\n                                value={singleCountry}\n                                onChange={handleSingleCountryChange}\n                            >\n                                {countries.map((year, index) => (\n                                    <MenuItem key={index} value={year}>{year}</MenuItem>\n                                ))}\n                            </Select>\n                        </FormControl>\n                        }\n                    </div>\n                </Popover>\n            </div>\n        </>\n    )\n};\n\nexport default Filters;","import Button from \"@material-ui/core/Button\";\nimport InfoIcon from '@material-ui/icons/Info';\nimport Popover from \"@material-ui/core/Popover\";\nimport React from \"react\";\n\nconst ComplementaryInformation = () => {\n    const [anchorEl, setAnchorEl] = React.useState(null);\n\n    const handleClick = event => {\n        if (anchorEl !== null) {\n            return handleClose()\n        }\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const open = Boolean(anchorEl);\n    const id = open ? 'simple-popover' : undefined;\n\n    return (\n        <>\n            <Button size={\"large\"} aria-describedby={id} className={\"info-button\"} variant=\"contained\" color=\"primary\" onClick={handleClick}>\n                <InfoIcon fontSize={\"large\"}/>\n            </Button>\n            <div className=\"info-container\">\n                <Popover\n                    id={id}\n                    open={open}\n                    anchorEl={anchorEl}\n                    onClose={handleClose}\n                    className={\"mt-3\"}\n                    anchorReference=\"anchorEl\"\n                    anchorOrigin={{\n                        vertical: 'bottom',\n                        horizontal: 'center',\n                    }}\n                    transformOrigin={{\n                        vertical: 'top',\n                        horizontal: 'center',\n                    }}\n                >\n                    <div className={\"p-3\"}>\n                        This is a visualization of country energy production and consumption<br/><br/>\n                        Sources : <br/>\n                        <a href=\"https://yearbook.enerdata.net/total-energy/world-energy-production.html\">Production</a> <br/>\n                        <a href=\"https://yearbook.enerdata.net/total-energy/world-consumption-statistics.html\">Consumption</a>\n                    </div>\n                </Popover>\n            </div>\n        </>\n    )\n};\n\nexport default ComplementaryInformation;","const filterCountriesDataset = (producersDataset, consumersDataset, currentYear, filterTop10Producers, filterTop10Consumers) => {\n\n    let countriesToFilter = false;\n\n    if (filterTop10Producers) {\n        countriesToFilter = producersDataset.sort(function(a, b){\n            if(a.years[currentYear] < b.years[currentYear]) { return 1; }\n            if(a.years[currentYear] > b.years[currentYear]) { return -1; }\n            return 0;\n        }).slice(0, 10).map(data => data.country);\n    }\n    if (filterTop10Consumers) {\n        countriesToFilter = consumersDataset.sort(function(a, b){\n            if(a.years[currentYear] < b.years[currentYear]) { return 1; }\n            if(a.years[currentYear] > b.years[currentYear]) { return -1; }\n            return 0;\n        }).slice(0, 10).map(data => data.country);\n    }\n\n    let filteredProducersDataset = countriesToFilter\n        ? producersDataset.filter(data => countriesToFilter.includes(data.country))\n        : producersDataset;\n\n    let filteredConsumersDataset = countriesToFilter\n        ? consumersDataset.filter(data => countriesToFilter.includes(data.country))\n        : consumersDataset;\n\n    return {\n        'producers': filteredProducersDataset,\n        'consumers': filteredConsumersDataset\n    };\n};\n\nexport default filterCountriesDataset;","import Tab from \"@material-ui/core/Tab\";\nimport React from \"react\";\n\nexport default function LinkTab(props) {\n    return (\n        <Tab\n            component=\"a\"\n            onClick={event => {\n                event.preventDefault();\n            }}\n            {...props}\n        />\n    );\n}","export default function a11yProps(index) {\n    return {\n        id: `nav-tab-${index}`,\n        'aria-controls': `nav-tabpanel-${index}`,\n    };\n}","import Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\nimport React from \"react\";\n\nexport default function TabPanel(props) {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <Typography\n            component=\"div\"\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`nav-tabpanel-${index}`}\n            aria-labelledby={`nav-tab-${index}`}\n            {...other}\n        >\n            {value === index && <Box p={3}>{children}</Box>}\n        </Typography>\n    );\n}","export default function generateChartJsData(dataset, currentYear, colors) {\n    return {\n        labels: dataset.map(data => data.country)\n        ,\n        datasets: [{\n            data: dataset.map(data => data.years[currentYear]),\n            backgroundColor: colors,\n            hoverBackgroundColor: colors\n        }]\n    };\n}","import {Bar, Doughnut} from \"react-chartjs-2\";\nimport React from \"react\";\n\nconst WorldVisualization = ({ productionData, consumptionData, mergedData }) => (\n    <>\n        <div className={\"chart-title\"}>Energy production by countries (Millions of tonnes of oil equivalent)</div>\n        <Doughnut data={productionData} />\n        <div className={\"chart-title\"}>Energy consumption by countries (Millions of tonnes of oil equivalent)</div>\n        <Doughnut data={consumptionData} />\n        <div className={\"chart-title\"}>Merged diagrams</div>\n        <Bar\n            data={mergedData}\n            width={100}\n            height={50}\n            options={{\n                scales: {\n                    xAxes: [{\n                        barPercentage: 1,\n                        categoryPercentage: 1\n                    }],\n                }\n            }}\n        />\n    </>\n);\n\nexport default WorldVisualization;","import {Line} from \"react-chartjs-2\";\nimport React from \"react\";\n\nconst SingleCountryVisualization = ({ singleCountry, singleCountryData }) => (\n    <>\n        <div className={\"chart-title\"}>Energy production and consumption for {singleCountry}</div>\n        <Line data={singleCountryData} />\n    </>\n);\n\nexport default SingleCountryVisualization;","import React from 'react';\nimport './App.css';\nimport getRandomColor from \"./utils/getRandomColor\";\nimport purifyDataset from \"./purifiers/purifyDataset\";\nimport Filters from \"./components/Filters\";\nimport ComplementaryInformation from \"./components/ComplementaryInformation\";\nimport filterCountriesDataset from \"./utils/filterCountriesDataset\";\nimport Tabs from '@material-ui/core/Tabs';\nimport LinkTab from \"./components/LinkTab\";\nimport a11yProps from \"./utils/allyProps\";\nimport TabPanel from \"./components/TabPanel\";\nimport generateChartJsData from \"./utils/generateChartJsData\";\nimport generateChartJsMergedData from \"./utils/generateChartJsMergedData\";\nimport generateChartJsSingleCountryData from \"./utils/generateChartJsSingleCountryData\";\nimport WorldVisualization from \"./components/WorldVisualization\";\nimport SingleCountryVisualization from \"./components/SingleCountryVisualization\";\n\n// Import data\nimport consumption from './data/consumption.json'\nimport production from './data/production.json'\n\n// Purify data\nlet purifiedProductionData = purifyDataset(production);\nlet purifiedConsumptionData = purifyDataset(consumption);\n\n// Generate diagram extra data\nconst years = Object.keys(production[0].years);\nconst colors = purifiedConsumptionData.map(() => getRandomColor());\nconst countries = purifiedProductionData.map(data => data.country);\n\nfunction App() {\n    const [filterTop10Producers, setFilterTop10Producers] = React.useState(false);\n    const [filterTop10Consumers, setFilterTop10Consumers] = React.useState(false);\n    const [singleCountry, setSingleCountry] = React.useState(\"France\");\n    const [currentYear, setCurrentYear] = React.useState(\"2018\");\n    const [appMode, setAppMode] = React.useState(0);\n\n    const filteredData = filterCountriesDataset(purifiedProductionData, purifiedConsumptionData, currentYear, filterTop10Producers, filterTop10Consumers);\n\n    const handleFilterTop10ProducersChange = () => {\n        setFilterTop10Producers(!filterTop10Producers);\n        setFilterTop10Consumers(false);\n    };\n\n    const handleFilterTop10ConsumersChange = () => {\n        setFilterTop10Consumers(!filterTop10Consumers)\n        setFilterTop10Producers(false);\n    };\n\n    const handleYearChange = (event) => {\n        setCurrentYear(event.target.value)\n    };\n\n    const handleSingleCountryChange = (event) => {\n        setSingleCountry(event.target.value)\n    };\n\n    const handleAppModeChange = (event, newValue) => {\n        setAppMode(newValue);\n    };\n\n    // Create chartjs data for both datasets\n    const productionData = generateChartJsData(filteredData.producers, currentYear, colors);\n    const consumptionData = generateChartJsData(filteredData.consumers, currentYear, colors);\n    const mergedData = generateChartJsMergedData(filterTop10Consumers, filteredData.producers, filteredData.consumers, currentYear);\n    const singleCountryData = generateChartJsSingleCountryData(\n        purifiedProductionData.find(producer => producer.country === singleCountry),\n        purifiedConsumptionData.find(producer => producer.country === singleCountry)\n    );\n\n    return (\n        <div className=\"App\">\n\n            <Tabs\n                centered\n                value={appMode}\n                onChange={handleAppModeChange}\n                aria-label=\"nav tabs example\"\n                indicatorColor=\"primary\"\n                textColor=\"primary\"\n            >\n                <LinkTab label=\"World\"  {...a11yProps(0)} />\n                <LinkTab label=\"Single country\"  {...a11yProps(1)} />\n            </Tabs>\n            <TabPanel value={appMode} index={0}>\n                <WorldVisualization\n                    productionData={productionData}\n                    consumptionData={consumptionData}\n                    mergedData={mergedData}\n                />\n            </TabPanel>\n            <TabPanel value={appMode} index={1}>\n                <SingleCountryVisualization\n                    singleCountry={singleCountry}\n                    singleCountryData={singleCountryData}\n                />\n            </TabPanel>\n\n            <ComplementaryInformation/>\n            <Filters\n                appMode={appMode}\n                singleCountry={singleCountry}\n                handleSingleCountryChange={handleSingleCountryChange}\n                countries={countries}\n                years={years}\n                currentYear={currentYear}\n                handleYearChange={handleYearChange}\n                filterTop10Producers={filterTop10Producers}\n                filterTop10Consumers={filterTop10Consumers}\n                handleFilterTop10ProducersChange={handleFilterTop10ProducersChange}\n                handleFilterTop10ConsumersChange={handleFilterTop10ConsumersChange}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","export default function getRandomColor() {\n    return \"#\"+((1<<24)*Math.random()|0).toString(16);\n}","export default function generateChartJsMergedData(producerDataset, consumerDataset) {\n    return {\n        labels: Object.keys(producerDataset.years),\n        datasets: [\n            {\n                label: \"Energy production (MTOE)\",\n                data: Object.keys(producerDataset.years).map(year => producerDataset.years[year]),\n                backgroundColor: 'rgba(99, 132, 0, 0.6)',\n                lineTension: 0.1,\n                borderColor: 'rgba(99, 132, 0, 0.6)',\n                borderCapStyle: 'butt',\n                borderWidth: 3,\n                fill: false,\n                borderJoinStyle: 'miter',\n                borderDash: [],\n                borderDashOffset: 0.0,\n                pointBorderColor: 'rgba(99, 132, 0, 0.6)',\n                pointBackgroundColor: 'rgba(99, 132, 0, 0.6)',\n                pointBorderWidth: 6,\n                pointHoverRadius: 5,\n                pointHoverBackgroundColor: 'rgba(99, 132, 0, 0.6)',\n                pointHoverBorderColor: 'rgba(99, 132, 0, 0.6)',\n                pointHoverBorderWidth: 2,\n                pointRadius: 1,\n                pointHitRadius: 10,\n            },\n            {\n                label: \"Energy consumption (MTOE)\",\n                data: Object.keys(consumerDataset.years).map(year => consumerDataset.years[year]),\n                backgroundColor: 'rgba(0, 99, 132, 0.6)',\n                lineTension: 0.1,\n                borderColor: 'rgba(0, 99, 132, 0.6)',\n                borderCapStyle: 'butt',\n                borderWidth: 3,\n                fill: false,\n                borderJoinStyle: 'miter',\n                borderDash: [],\n                borderDashOffset: 0.0,\n                pointBorderColor: 'rgba(0, 99, 132, 0.6)',\n                pointBackgroundColor: 'rgba(0, 99, 132, 0.6)',\n                pointBorderWidth: 6,\n                pointHoverRadius: 5,\n                pointHoverBackgroundColor: 'rgba(0, 99, 132, 0.6)',\n                pointHoverBorderColor: 'rgba(0, 99, 132, 0.6)',\n                pointHoverBorderWidth: 2,\n                pointRadius: 1,\n                pointHitRadius: 10,            }\n        ]\n    };\n}","export default function generateChartJsMergedData(filterTop10Consumers, producers, consumers, currentYear) {\n    return {\n        labels: (filterTop10Consumers)\n            ? consumers.map(data => data.country)\n            : producers.map(data => data.country)\n        ,\n        datasets: [\n            {\n                label: \"Energy production (MTOE)\",\n                data: producers.map(data => data.years[currentYear]),\n                backgroundColor: 'rgba(99, 132, 0, 0.6)',\n                borderWidth: 0,\n            },\n            {\n                label: \"Energy consumption (MTOE)\",\n                data: consumers.map(data => data.years[currentYear]),\n                backgroundColor: 'rgba(0, 99, 132, 0.6)',\n                borderWidth: 0,\n            }\n        ]\n    };\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}