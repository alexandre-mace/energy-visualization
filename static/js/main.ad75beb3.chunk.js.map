{"version":3,"sources":["utils/getCountryName.js","components/Filters.js","components/ComplementaryInformation.js","App.js","purifiers/purifyConsumption.js","purifiers/purifyProduction.js","utils/getRandomColor.js","utils/getCountryDelta.js","serviceWorker.js","index.js"],"names":["isoCountries","getCountryName","countryCode","hasOwnProperty","Filters","filterTop10","handleFilterTop10Change","React","useState","anchorEl","setAnchorEl","handleClose","open","Boolean","id","undefined","Button","aria-describedby","className","variant","color","onClick","event","currentTarget","Popover","onClose","anchorReference","anchorOrigin","vertical","horizontal","transformOrigin","FormControlLabel","control","Switch","checked","onChange","value","label","ComplementaryInformation","href","purifiedConsumptionData","consumption","filter","data","parseFloat","Object","keys","isNaN","map","slice","sort","a","b","country","purifiedProductionData","productionData","globalProductionByCountry","capacity","purifiedData","forEach","countryData","find","findData","concernedCountry","Math","ceil","push","purifyProduction","production","colors","random","toString","countryDelta","firstDataSet","secondDataSet","countryDeltaFirstBatch","dataConsumption","countryDeltaSecondBatch","dataProduction","concat","getCountryDelta","includes","App","setFilterTop10","filteredProductionData","filteredConsumptionData","labels","datasets","backgroundColor","hoverBackgroundColor","consumptionData","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uNAAA,IAAIA,EAAe,CACf,GAAO,cACP,GAAO,gBACP,GAAO,UACP,GAAO,UACP,GAAO,iBACP,GAAO,UACP,GAAO,SACP,GAAO,WACP,GAAO,aACP,GAAO,sBACP,GAAO,YACP,GAAO,UACP,GAAO,QACP,GAAO,YACP,GAAO,UACP,GAAO,aACP,GAAO,UACP,GAAO,UACP,GAAO,aACP,GAAO,WACP,GAAO,UACP,GAAO,UACP,GAAO,SACP,GAAO,QACP,GAAO,UACP,GAAO,SACP,GAAO,UACP,GAAO,yBACP,GAAO,WACP,GAAO,gBACP,GAAO,SACP,GAAO,iCACP,GAAO,oBACP,GAAO,WACP,GAAO,eACP,GAAO,UACP,GAAO,WACP,GAAO,WACP,GAAO,SACP,GAAO,aACP,GAAO,iBACP,GAAO,2BACP,GAAO,OACP,GAAO,QACP,GAAO,QACP,GAAO,mBACP,GAAO,0BACP,GAAO,WACP,GAAO,UACP,GAAO,QACP,GAAO,6BACP,GAAO,eACP,GAAO,aACP,GAAO,gBACP,GAAO,UACP,GAAO,OACP,GAAO,SACP,GAAO,iBACP,GAAO,UACP,GAAO,WACP,GAAO,WACP,GAAO,qBACP,GAAO,UACP,GAAO,QACP,GAAO,cACP,GAAO,oBACP,GAAO,UACP,GAAO,UACP,GAAO,WACP,GAAO,8BACP,GAAO,gBACP,GAAO,OACP,GAAO,UACP,GAAO,SACP,GAAO,gBACP,GAAO,mBACP,GAAO,8BACP,GAAO,QACP,GAAO,SACP,GAAO,UACP,GAAO,UACP,GAAO,QACP,GAAO,YACP,GAAO,SACP,GAAO,YACP,GAAO,UACP,GAAO,aACP,GAAO,OACP,GAAO,YACP,GAAO,WACP,GAAO,SACP,GAAO,gBACP,GAAO,SACP,GAAO,QACP,GAAO,kCACP,GAAO,gCACP,GAAO,WACP,GAAO,YACP,GAAO,UACP,GAAO,UACP,GAAO,QACP,GAAO,YACP,GAAO,4BACP,GAAO,OACP,GAAO,UACP,GAAO,cACP,GAAO,SACP,GAAO,QACP,GAAO,UACP,GAAO,QACP,GAAO,SACP,GAAO,SACP,GAAO,aACP,GAAO,QACP,GAAO,WACP,GAAO,QACP,GAAO,SACP,GAAO,aACP,GAAO,mCACP,GAAO,SACP,GAAO,UACP,GAAO,UACP,GAAO,UACP,GAAO,yBACP,GAAO,gBACP,GAAO,YACP,GAAO,aACP,GAAO,QACP,GAAO,YACP,GAAO,aACP,GAAO,SACP,GAAO,WACP,GAAO,WACP,GAAO,OACP,GAAO,QACP,GAAO,mBACP,GAAO,aACP,GAAO,aACP,GAAO,YACP,GAAO,UACP,GAAO,SACP,GAAO,kCACP,GAAO,UACP,GAAO,SACP,GAAO,WACP,GAAO,aACP,GAAO,aACP,GAAO,UACP,GAAO,aACP,GAAO,UACP,GAAO,UACP,GAAO,QACP,GAAO,QACP,GAAO,cACP,GAAO,uBACP,GAAO,gBACP,GAAO,cACP,GAAO,YACP,GAAO,QACP,GAAO,UACP,GAAO,OACP,GAAO,iBACP,GAAO,2BACP,GAAO,SACP,GAAO,OACP,GAAO,WACP,GAAO,QACP,GAAO,kCACP,GAAO,SACP,GAAO,mBACP,GAAO,WACP,GAAO,OACP,GAAO,cACP,GAAO,WACP,GAAO,SACP,GAAO,WACP,GAAO,cACP,GAAO,QACP,GAAO,UACP,GAAO,UACP,GAAO,qBACP,GAAO,SACP,GAAO,mBACP,GAAO,eACP,GAAO,wBACP,GAAO,cACP,GAAO,eACP,GAAO,4BACP,GAAO,+BACP,GAAO,QACP,GAAO,aACP,GAAO,wBACP,GAAO,eACP,GAAO,UACP,GAAO,SACP,GAAO,aACP,GAAO,eACP,GAAO,YACP,GAAO,WACP,GAAO,WACP,GAAO,kBACP,GAAO,UACP,GAAO,eACP,GAAO,kCACP,GAAO,QACP,GAAO,YACP,GAAO,QACP,GAAO,WACP,GAAO,yBACP,GAAO,YACP,GAAO,SACP,GAAO,cACP,GAAO,uBACP,GAAO,SACP,GAAO,aACP,GAAO,WACP,GAAO,WACP,GAAO,cACP,GAAO,OACP,GAAO,UACP,GAAO,QACP,GAAO,sBACP,GAAO,UACP,GAAO,SACP,GAAO,eACP,GAAO,2BACP,GAAO,SACP,GAAO,SACP,GAAO,UACP,GAAO,uBACP,GAAO,iBACP,GAAO,gBACP,GAAO,iC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","file":"static/js/main.ad75beb3.chunk.js","sourcesContent":["var isoCountries = {\n    'AF' : 'Afghanistan',\n    'AX' : 'Aland Islands',\n    'AL' : 'Albania',\n    'DZ' : 'Algeria',\n    'AS' : 'American Samoa',\n    'AD' : 'Andorra',\n    'AO' : 'Angola',\n    'AI' : 'Anguilla',\n    'AQ' : 'Antarctica',\n    'AG' : 'Antigua And Barbuda',\n    'AR' : 'Argentina',\n    'AM' : 'Armenia',\n    'AW' : 'Aruba',\n    'AU' : 'Australia',\n    'AT' : 'Austria',\n    'AZ' : 'Azerbaijan',\n    'BS' : 'Bahamas',\n    'BH' : 'Bahrain',\n    'BD' : 'Bangladesh',\n    'BB' : 'Barbados',\n    'BY' : 'Belarus',\n    'BE' : 'Belgium',\n    'BZ' : 'Belize',\n    'BJ' : 'Benin',\n    'BM' : 'Bermuda',\n    'BT' : 'Bhutan',\n    'BO' : 'Bolivia',\n    'BA' : 'Bosnia And Herzegovina',\n    'BW' : 'Botswana',\n    'BV' : 'Bouvet Island',\n    'BR' : 'Brazil',\n    'IO' : 'British Indian Ocean Territory',\n    'BN' : 'Brunei Darussalam',\n    'BG' : 'Bulgaria',\n    'BF' : 'Burkina Faso',\n    'BI' : 'Burundi',\n    'KH' : 'Cambodia',\n    'CM' : 'Cameroon',\n    'CA' : 'Canada',\n    'CV' : 'Cape Verde',\n    'KY' : 'Cayman Islands',\n    'CF' : 'Central African Republic',\n    'TD' : 'Chad',\n    'CL' : 'Chile',\n    'CN' : 'China',\n    'CX' : 'Christmas Island',\n    'CC' : 'Cocos (Keeling) Islands',\n    'CO' : 'Colombia',\n    'KM' : 'Comoros',\n    'CG' : 'Congo',\n    'CD' : 'Congo, Democratic Republic',\n    'CK' : 'Cook Islands',\n    'CR' : 'Costa Rica',\n    'CI' : 'Cote D\\'Ivoire',\n    'HR' : 'Croatia',\n    'CU' : 'Cuba',\n    'CY' : 'Cyprus',\n    'CZ' : 'Czech Republic',\n    'DK' : 'Denmark',\n    'DJ' : 'Djibouti',\n    'DM' : 'Dominica',\n    'DO' : 'Dominican Republic',\n    'EC' : 'Ecuador',\n    'EG' : 'Egypt',\n    'SV' : 'El Salvador',\n    'GQ' : 'Equatorial Guinea',\n    'ER' : 'Eritrea',\n    'EE' : 'Estonia',\n    'ET' : 'Ethiopia',\n    'FK' : 'Falkland Islands (Malvinas)',\n    'FO' : 'Faroe Islands',\n    'FJ' : 'Fiji',\n    'FI' : 'Finland',\n    'FR' : 'France',\n    'GF' : 'French Guiana',\n    'PF' : 'French Polynesia',\n    'TF' : 'French Southern Territories',\n    'GA' : 'Gabon',\n    'GM' : 'Gambia',\n    'GE' : 'Georgia',\n    'DE' : 'Germany',\n    'GH' : 'Ghana',\n    'GI' : 'Gibraltar',\n    'GR' : 'Greece',\n    'GL' : 'Greenland',\n    'GD' : 'Grenada',\n    'GP' : 'Guadeloupe',\n    'GU' : 'Guam',\n    'GT' : 'Guatemala',\n    'GG' : 'Guernsey',\n    'GN' : 'Guinea',\n    'GW' : 'Guinea-Bissau',\n    'GY' : 'Guyana',\n    'HT' : 'Haiti',\n    'HM' : 'Heard Island & Mcdonald Islands',\n    'VA' : 'Holy See (Vatican City State)',\n    'HN' : 'Honduras',\n    'HK' : 'Hong Kong',\n    'HU' : 'Hungary',\n    'IS' : 'Iceland',\n    'IN' : 'India',\n    'ID' : 'Indonesia',\n    'IR' : 'Iran, Islamic Republic Of',\n    'IQ' : 'Iraq',\n    'IE' : 'Ireland',\n    'IM' : 'Isle Of Man',\n    'IL' : 'Israel',\n    'IT' : 'Italy',\n    'JM' : 'Jamaica',\n    'JP' : 'Japan',\n    'JE' : 'Jersey',\n    'JO' : 'Jordan',\n    'KZ' : 'Kazakhstan',\n    'KE' : 'Kenya',\n    'KI' : 'Kiribati',\n    'KR' : 'Korea',\n    'KW' : 'Kuwait',\n    'KG' : 'Kyrgyzstan',\n    'LA' : 'Lao People\\'s Democratic Republic',\n    'LV' : 'Latvia',\n    'LB' : 'Lebanon',\n    'LS' : 'Lesotho',\n    'LR' : 'Liberia',\n    'LY' : 'Libyan Arab Jamahiriya',\n    'LI' : 'Liechtenstein',\n    'LT' : 'Lithuania',\n    'LU' : 'Luxembourg',\n    'MO' : 'Macao',\n    'MK' : 'Macedonia',\n    'MG' : 'Madagascar',\n    'MW' : 'Malawi',\n    'MY' : 'Malaysia',\n    'MV' : 'Maldives',\n    'ML' : 'Mali',\n    'MT' : 'Malta',\n    'MH' : 'Marshall Islands',\n    'MQ' : 'Martinique',\n    'MR' : 'Mauritania',\n    'MU' : 'Mauritius',\n    'YT' : 'Mayotte',\n    'MX' : 'Mexico',\n    'FM' : 'Micronesia, Federated States Of',\n    'MD' : 'Moldova',\n    'MC' : 'Monaco',\n    'MN' : 'Mongolia',\n    'ME' : 'Montenegro',\n    'MS' : 'Montserrat',\n    'MA' : 'Morocco',\n    'MZ' : 'Mozambique',\n    'MM' : 'Myanmar',\n    'NA' : 'Namibia',\n    'NR' : 'Nauru',\n    'NP' : 'Nepal',\n    'NL' : 'Netherlands',\n    'AN' : 'Netherlands Antilles',\n    'NC' : 'New Caledonia',\n    'NZ' : 'New Zealand',\n    'NI' : 'Nicaragua',\n    'NE' : 'Niger',\n    'NG' : 'Nigeria',\n    'NU' : 'Niue',\n    'NF' : 'Norfolk Island',\n    'MP' : 'Northern Mariana Islands',\n    'NO' : 'Norway',\n    'OM' : 'Oman',\n    'PK' : 'Pakistan',\n    'PW' : 'Palau',\n    'PS' : 'Palestinian Territory, Occupied',\n    'PA' : 'Panama',\n    'PG' : 'Papua New Guinea',\n    'PY' : 'Paraguay',\n    'PE' : 'Peru',\n    'PH' : 'Philippines',\n    'PN' : 'Pitcairn',\n    'PL' : 'Poland',\n    'PT' : 'Portugal',\n    'PR' : 'Puerto Rico',\n    'QA' : 'Qatar',\n    'RE' : 'Reunion',\n    'RO' : 'Romania',\n    'RU' : 'Russian Federation',\n    'RW' : 'Rwanda',\n    'BL' : 'Saint Barthelemy',\n    'SH' : 'Saint Helena',\n    'KN' : 'Saint Kitts And Nevis',\n    'LC' : 'Saint Lucia',\n    'MF' : 'Saint Martin',\n    'PM' : 'Saint Pierre And Miquelon',\n    'VC' : 'Saint Vincent And Grenadines',\n    'WS' : 'Samoa',\n    'SM' : 'San Marino',\n    'ST' : 'Sao Tome And Principe',\n    'SA' : 'Saudi Arabia',\n    'SN' : 'Senegal',\n    'RS' : 'Serbia',\n    'SC' : 'Seychelles',\n    'SL' : 'Sierra Leone',\n    'SG' : 'Singapore',\n    'SK' : 'Slovakia',\n    'SI' : 'Slovenia',\n    'SB' : 'Solomon Islands',\n    'SO' : 'Somalia',\n    'ZA' : 'South Africa',\n    'GS' : 'South Georgia And Sandwich Isl.',\n    'ES' : 'Spain',\n    'LK' : 'Sri Lanka',\n    'SD' : 'Sudan',\n    'SR' : 'Suriname',\n    'SJ' : 'Svalbard And Jan Mayen',\n    'SZ' : 'Swaziland',\n    'SE' : 'Sweden',\n    'CH' : 'Switzerland',\n    'SY' : 'Syrian Arab Republic',\n    'TW' : 'Taiwan',\n    'TJ' : 'Tajikistan',\n    'TZ' : 'Tanzania',\n    'TH' : 'Thailand',\n    'TL' : 'Timor-Leste',\n    'TG' : 'Togo',\n    'TK' : 'Tokelau',\n    'TO' : 'Tonga',\n    'TT' : 'Trinidad And Tobago',\n    'TN' : 'Tunisia',\n    'TR' : 'Turkey',\n    'TM' : 'Turkmenistan',\n    'TC' : 'Turks And Caicos Islands',\n    'TV' : 'Tuvalu',\n    'UG' : 'Uganda',\n    'UA' : 'Ukraine',\n    'AE' : 'United Arab Emirates',\n    'GB' : 'United Kingdom',\n    'US' : 'United States',\n    'UM' : 'United States Outlying Islands',\n    'UY' : 'Uruguay',\n    'UZ' : 'Uzbekistan',\n    'VU' : 'Vanuatu',\n    'VE' : 'Venezuela',\n    'VN' : 'Viet Nam',\n    'VG' : 'Virgin Islands, British',\n    'VI' : 'Virgin Islands, U.S.',\n    'WF' : 'Wallis And Futuna',\n    'EH' : 'Western Sahara',\n    'YE' : 'Yemen',\n    'ZM' : 'Zambia',\n    'ZW' : 'Zimbabwe'\n};\n\nexport default function getCountryName (countryCode) {\n    if (isoCountries.hasOwnProperty(countryCode)) {\n        return isoCountries[countryCode];\n    } else {\n        return countryCode;\n    }\n}","import Button from \"@material-ui/core/Button\";\nimport TuneIcon from \"@material-ui/icons/Tune\";\nimport Popover from \"@material-ui/core/Popover\";\nimport {FormControlLabel, Switch} from \"@material-ui/core\";\nimport React from \"react\";\n\nconst Filters = ({ filterTop10, handleFilterTop10Change }) => {\n    const [anchorEl, setAnchorEl] = React.useState(null);\n\n    const handleClick = event => {\n        if (anchorEl !== null) {\n            return handleClose()\n        }\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const open = Boolean(anchorEl);\n    const id = open ? 'simple-popover' : undefined;\n\n    return (\n        <>\n            <Button aria-describedby={id} className={\"h-100 settings-button\"} variant=\"contained\" color=\"primary\" onClick={handleClick}>\n                <TuneIcon/>\n            </Button>\n            <div className=\"settings-container\">\n                <Popover\n                    id={id}\n                    open={open}\n                    anchorEl={anchorEl}\n                    onClose={handleClose}\n                    className={\"mt-3\"}\n                    anchorReference=\"anchorEl\"\n                    anchorOrigin={{\n                        vertical: 'bottom',\n                        horizontal: 'center',\n                    }}\n                    transformOrigin={{\n                        vertical: 'top',\n                        horizontal: 'center',\n                    }}\n                >\n                    <div className={\"p-3\"}>\n                        <FormControlLabel\n                            control={\n                                <Switch checked={filterTop10} onChange={handleFilterTop10Change} value=\"hidden\" color=\"primary\" />\n                            }\n                            label=\"Filter top 10\"\n                        />\n                    </div>\n                </Popover>\n            </div>\n        </>\n    )\n};\n\nexport default Filters;","import Button from \"@material-ui/core/Button\";\nimport InfoIcon from '@material-ui/icons/Info';\nimport Popover from \"@material-ui/core/Popover\";\nimport React from \"react\";\n\nconst ComplementaryInformation = () => {\n    const [anchorEl, setAnchorEl] = React.useState(null);\n\n    const handleClick = event => {\n        if (anchorEl !== null) {\n            return handleClose()\n        }\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const open = Boolean(anchorEl);\n    const id = open ? 'simple-popover' : undefined;\n\n    return (\n        <>\n            <Button aria-describedby={id} className={\"h-100 info-button\"} variant=\"contained\" color=\"primary\" onClick={handleClick}>\n                <InfoIcon/>\n            </Button>\n            <div className=\"info-container\">\n                <Popover\n                    id={id}\n                    open={open}\n                    anchorEl={anchorEl}\n                    onClose={handleClose}\n                    className={\"mt-3\"}\n                    anchorReference=\"anchorEl\"\n                    anchorOrigin={{\n                        vertical: 'bottom',\n                        horizontal: 'center',\n                    }}\n                    transformOrigin={{\n                        vertical: 'top',\n                        horizontal: 'center',\n                    }}\n                >\n                    <div className={\"p-3\"}>\n                        This is a visualization of country energy production and consumption for the year of 2015 <br/><br/>\n                        Sources : <br/>\n                        <a href=\"https://data.open-power-system-data.org/national_generation_capacity/\">Production</a> <br/>\n                        <a href=\"https://data.europa.eu/euodp/en/data/dataset/Jat1A5cjQ2XK3Yq7cv779g\">Consumption</a>\n                    </div>\n                </Popover>\n            </div>\n        </>\n    )\n};\n\nexport default ComplementaryInformation;","import React from 'react';\nimport './App.css';\nimport { Doughnut } from 'react-chartjs-2';\nimport getRandomColor from \"./utils/getRandomColor\";\nimport purifyProduction from \"./purifiers/purifyProduction\";\nimport purifyConsumption from \"./purifiers/purifyConsumption\";\nimport getCountryDelta from \"./utils/getCountryDelta\";\n// Import data\nimport consumption from './data/consumption2015.json'\nimport production from './data/production2015.json';\nimport Filters from \"./components/Filters\";\nimport ComplementaryInformation from \"./components/ComplementaryInformation\";\n\n// Purify data\nlet purifiedConsumptionData = purifyConsumption(consumption);\nlet purifiedProductionData = purifyProduction(production);\n\n// Filter data to harmonize country data sets\nconst colors = purifiedConsumptionData.map(() => getRandomColor());\nconst countryDelta = getCountryDelta(purifiedProductionData, purifiedConsumptionData);\npurifiedConsumptionData = purifiedConsumptionData.filter(data => !countryDelta.includes(data.country));\npurifiedProductionData = purifiedProductionData.filter(data => !countryDelta.includes(data.country));\n\nfunction App() {\n    const [filterTop10, setFilterTop10] = React.useState(false);\n\n    const filteredProductionData = filterTop10\n        ? [...purifiedProductionData].sort(function(a, b){\n            if(a.capacity < b.capacity) { return 1; }\n            if(a.capacity > b.capacity) { return -1; }\n            return 0;\n        }).slice(0, 10)\n        : purifiedProductionData;\n\n    const filteredConsumptionData = filterTop10\n        ? [...purifiedConsumptionData].sort(function(a, b){\n            if(a.consumption < b.consumption) { return 1; }\n            if(a.consumption > b.consumption) { return -1; }\n            return 0;\n        }).slice(0, 10)\n        : purifiedConsumptionData;\n\n    const handleFilterTop10Change = () => {\n        setFilterTop10(!filterTop10)\n    };\n\n    // Create chartjs data for both datasets\n    const productionData = {\n        labels: filteredProductionData.map(data => data.country)\n        ,\n        datasets: [{\n            data: filteredProductionData.map(data => data.capacity),\n            backgroundColor: colors,\n            hoverBackgroundColor: colors\n        }]\n    };\n    const consumptionData = {\n        labels: filteredConsumptionData.map(data => data.country)\n        ,\n        datasets: [{\n            data: filteredConsumptionData.map(data => data.consumption),\n            backgroundColor: colors,\n            hoverBackgroundColor: colors\n        }]\n    };\n\n    return (\n        <div className=\"App\">\n            <ComplementaryInformation/>\n            <div className={\"chart-title mt-0\"}>Energy production by countries (Megawatts (Mw))</div>\n            <Doughnut data={productionData} />\n            <div className={\"chart-title\"}>Energy consumption by countries (Millions of tonnes of oil equivalent (Mtoe))</div>\n            <Doughnut data={consumptionData} />\n            <Filters\n                filterTop10={filterTop10}\n                handleFilterTop10Change={handleFilterTop10Change}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","import getCountryName from \"../utils/getCountryName\";\n\nexport default function purifyConsumption(consumptionData) {\n    return consumptionData.filter(data => typeof parseFloat(data[Object.keys(data)[1]]) === 'number' && !isNaN(parseFloat(data[Object.keys(data)[1]]))).map(data => {\n            return {\n                \"country\": getCountryName(data[Object.keys(data)[0]].slice(-2)),\n                \"consumption\" : parseFloat(data[Object.keys(data)[1]])\n            }\n    }).sort(function(a, b){\n        if(a.country < b.country) { return -1; }\n        if(a.country > b.country) { return 1; }\n        return 0;\n    });\n}","import getCountryName from \"../utils/getCountryName\";\n\nexport default function purifyProduction(productionData) {\n    const globalProductionByCountry = productionData.map(data => (\n        {\n            \"country\" : getCountryName(data.country),\n            \"capacity\": data.capacity\n        }\n    ));\n    let purifiedData = [];\n    globalProductionByCountry.forEach(countryData => {\n        if (!(purifiedData.find(findData => findData.country === countryData.country))) {\n            if (typeof countryData.capacity === \"number\") {\n                purifiedData.push(countryData)\n            }\n        } else {\n            let concernedCountry = purifiedData.find(findData =>  findData.country === countryData.country);\n            if (typeof countryData.capacity === \"number\") {\n                concernedCountry.capacity = Math.ceil(concernedCountry.capacity) + Math.ceil(countryData.capacity)\n            }\n        }\n    });\n\n    return purifiedData.sort(function(a, b){\n        if(a.country < b.country) { return -1; }\n        if(a.country > b.country) { return 1; }\n        return 0;\n    });\n}","export default function getRandomColor() {\n    return \"#\"+((1<<24)*Math.random()|0).toString(16);\n}","export default function getCountryDelta(firstDataSet, secondDataSet) {\n    const countryDeltaFirstBatch = firstDataSet.map(data => {\n        if (!secondDataSet.find(dataConsumption => (dataConsumption.country === data.country))) {\n            return data.country\n        }\n    }).filter(data => data !== undefined);\n\n    const countryDeltaSecondBatch = secondDataSet.map(data => {\n        if (!firstDataSet.find(dataProduction => (dataProduction.country === data.country))) {\n            return data.country\n        }\n    }).filter(data => data !== undefined);\n\n    return countryDeltaFirstBatch.concat(countryDeltaSecondBatch);\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}